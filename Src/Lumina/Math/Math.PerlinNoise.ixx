export module Lumina.Math.PerlinNoise;

//****	******	******	******	******	****//

import <cstdint>;

import <cmath>;
import <algorithm>;

import Lumina.Math.Numerics;

//////	//////	//////	//////	//////	//////

#define INLINE_NAMESPACE_MATH_BEGIN		inline namespace Math {
#define INLINE_NAMESPACE_MATH_END		}

//****	******	******	******	******	****//

//----	------	------	------	------	----//
//	Declaration								//
//----	------	------	------	------	----//

export namespace Lumina {
	INLINE_NAMESPACE_MATH_BEGIN

	// Credit: https://adrianb.io/2014/08/09/perlinnoise.html
	class PerlinNoise {
	public:
		float operator()(float x_, float y_, float z_) const noexcept;

		//----	------	------	------	------	----//

	public:
		PerlinNoise(
			float baseFreq_ = 1.0f,
			uint32_t num_Octaves_ = 1U,
			float persistance_ = 0.5f,
			Float3 const& offset_ = { 0.0f, 0.0f, 0.0f }
		) noexcept;

		//====	======	======	======	======	====//

	private:
		float BaseFrequency_{};
		uint32_t Num_Octaves_{};
		float Persistance_{};
		Float3 Offset_{};

		// Inverse of the maximum possible value of all outputs
		float Inv_MaxPossibleValue_{};

		//****	******	******	******	******	****//

	private:
		static float Calculate(
			float x_, float y_, float z_,
			float freq_,
			Float3 const& offset_
		) noexcept;

		//----	------	------	------	------	----//

	private:
		static constexpr int32_t Hash(int32_t x_, int32_t y_, int32_t z_) noexcept;
		static constexpr float Surflet(int32_t hashVal_, float x_, float y_, float z_) noexcept;
		static constexpr float Fade(float t_) noexcept;

		//====	======	======	======	======	====//

	private:
		// Permutation lookup table as defined by Ken Perlin
		static constexpr int32_t Permutation_[512]{
			0x97, 0xA0, 0x89, 0x5B, 0x5A, 0x0F, 0x83, 0x0D, 0xC9, 0x5F, 0x60, 0x35, 0xC2, 0xE9, 0x07, 0xE1,
			0x8C, 0x24, 0x67, 0x1E, 0x45, 0x8E, 0x08, 0x63, 0x25, 0xF0, 0x15, 0x0A, 0x17, 0xBE, 0x06, 0x94,
			0xF7, 0x78, 0xEA, 0x4B, 0x00, 0x1A, 0xC5, 0x3E, 0x5E, 0xFC, 0xDB, 0xCB, 0x75, 0x23, 0x0B, 0x20,
			0x39, 0xB1, 0x21, 0x58, 0xED, 0x95, 0x38, 0x57, 0xAE, 0x14, 0x7D, 0x88, 0xAB, 0xA8, 0x44, 0xAF,
			0x4A, 0xA5, 0x47, 0x86, 0x8B, 0x30, 0x1B, 0xA6, 0x4D, 0x92, 0x9E, 0xE7, 0x53, 0x6F, 0xE5, 0x7A,
			0x3C, 0xD3, 0x85, 0xE6, 0xDC, 0x69, 0x5C, 0x29, 0x37, 0x2E, 0xF5, 0x28, 0xF4, 0x66, 0x8F, 0x36,
			0x41, 0x19, 0x3F, 0xA1, 0x01, 0xD8, 0x50, 0x49, 0xD1, 0x4C, 0x84, 0xBB, 0xD0, 0x59, 0x12, 0xA9,
			0xC8, 0xC4, 0x87, 0x82, 0x74, 0xBC, 0x9F, 0x56, 0xA4, 0x64, 0x6D, 0xC6, 0xAD, 0xBA, 0x03, 0x40,
			0x34, 0xD9, 0xE2, 0xFA, 0x7C, 0x7B, 0x05, 0xCA, 0x26, 0x93, 0x76, 0x7E, 0xFF, 0x52, 0x55, 0xD4,
			0xCF, 0xCE, 0x3B, 0xE3, 0x2F, 0x10, 0x3A, 0x11, 0xB6, 0xBD, 0x1C, 0x2A, 0xDF, 0xB7, 0xAA, 0xD5,
			0x77, 0xF8, 0x98, 0x02, 0x2C, 0x9A, 0xA3, 0x46, 0xDD, 0x99, 0x65, 0x9B, 0xA7, 0x2B, 0xAC, 0x09,
			0x81, 0x16, 0x27, 0xFD, 0x13, 0x62, 0x6C, 0x6E, 0x4F, 0x71, 0xE0, 0xE8, 0xB2, 0xB9, 0x70, 0x68,
			0xDA, 0xF6, 0x61, 0xE4, 0xFB, 0x22, 0xF2, 0xC1, 0xEE, 0xD2, 0x90, 0x0C, 0xBF, 0xB3, 0xA2, 0xF1,
			0x51, 0x33, 0x91, 0xEB, 0xF9, 0x0E, 0xEF, 0x6B, 0x31, 0xC0, 0xD6, 0x1F, 0xB5, 0xC7, 0x6A, 0x9D,
			0xB8, 0x54, 0xCC, 0xB0, 0x73, 0x79, 0x32, 0x2D, 0x7F, 0x04, 0x96, 0xFE, 0x8A, 0xEC, 0xCD, 0x5D,
			0xDE, 0x72, 0x43, 0x1D, 0x18, 0x48, 0xF3, 0x8D, 0x80, 0xC3, 0x4E, 0x42, 0xD7, 0x3D, 0x9C, 0xB4,

			0x97, 0xA0, 0x89, 0x5B, 0x5A, 0x0F, 0x83, 0x0D, 0xC9, 0x5F, 0x60, 0x35, 0xC2, 0xE9, 0x07, 0xE1,
			0x8C, 0x24, 0x67, 0x1E, 0x45, 0x8E, 0x08, 0x63, 0x25, 0xF0, 0x15, 0x0A, 0x17, 0xBE, 0x06, 0x94,
			0xF7, 0x78, 0xEA, 0x4B, 0x00, 0x1A, 0xC5, 0x3E, 0x5E, 0xFC, 0xDB, 0xCB, 0x75, 0x23, 0x0B, 0x20,
			0x39, 0xB1, 0x21, 0x58, 0xED, 0x95, 0x38, 0x57, 0xAE, 0x14, 0x7D, 0x88, 0xAB, 0xA8, 0x44, 0xAF,
			0x4A, 0xA5, 0x47, 0x86, 0x8B, 0x30, 0x1B, 0xA6, 0x4D, 0x92, 0x9E, 0xE7, 0x53, 0x6F, 0xE5, 0x7A,
			0x3C, 0xD3, 0x85, 0xE6, 0xDC, 0x69, 0x5C, 0x29, 0x37, 0x2E, 0xF5, 0x28, 0xF4, 0x66, 0x8F, 0x36,
			0x41, 0x19, 0x3F, 0xA1, 0x01, 0xD8, 0x50, 0x49, 0xD1, 0x4C, 0x84, 0xBB, 0xD0, 0x59, 0x12, 0xA9,
			0xC8, 0xC4, 0x87, 0x82, 0x74, 0xBC, 0x9F, 0x56, 0xA4, 0x64, 0x6D, 0xC6, 0xAD, 0xBA, 0x03, 0x40,
			0x34, 0xD9, 0xE2, 0xFA, 0x7C, 0x7B, 0x05, 0xCA, 0x26, 0x93, 0x76, 0x7E, 0xFF, 0x52, 0x55, 0xD4,
			0xCF, 0xCE, 0x3B, 0xE3, 0x2F, 0x10, 0x3A, 0x11, 0xB6, 0xBD, 0x1C, 0x2A, 0xDF, 0xB7, 0xAA, 0xD5,
			0x77, 0xF8, 0x98, 0x02, 0x2C, 0x9A, 0xA3, 0x46, 0xDD, 0x99, 0x65, 0x9B, 0xA7, 0x2B, 0xAC, 0x09,
			0x81, 0x16, 0x27, 0xFD, 0x13, 0x62, 0x6C, 0x6E, 0x4F, 0x71, 0xE0, 0xE8, 0xB2, 0xB9, 0x70, 0x68,
			0xDA, 0xF6, 0x61, 0xE4, 0xFB, 0x22, 0xF2, 0xC1, 0xEE, 0xD2, 0x90, 0x0C, 0xBF, 0xB3, 0xA2, 0xF1,
			0x51, 0x33, 0x91, 0xEB, 0xF9, 0x0E, 0xEF, 0x6B, 0x31, 0xC0, 0xD6, 0x1F, 0xB5, 0xC7, 0x6A, 0x9D,
			0xB8, 0x54, 0xCC, 0xB0, 0x73, 0x79, 0x32, 0x2D, 0x7F, 0x04, 0x96, 0xFE, 0x8A, 0xEC, 0xCD, 0x5D,
			0xDE, 0x72, 0x43, 0x1D, 0x18, 0x48, 0xF3, 0x8D, 0x80, 0xC3, 0x4E, 0x42, 0xD7, 0x3D, 0x9C, 0xB4,
		};
		// Gradient vector lookup table as defined by Ken Perlin 
		static constexpr Float3 Gradients_[16]{
			{ 1.0f, 1.0f, 0.0f },
			{ -1.0f, 1.0f, 0.0f },
			{ 1.0f, -1.0f, 0.0f },
			{ -1.0f, -1.0f, 0.0f },
			{ 1.0f, 0.0f, 1.0f },
			{ -1.0f, 0.0f, 1.0f },
			{ 1.0f, 0.0f, -1.0f },
			{ -1.0f, 0.0f, -1.0f },
			{ 0.0f, 1.0f, 1.0f },
			{ 0.0f, -1.0f, 1.0f },
			{ 0.0f, 1.0f, -1.0f },
			{ 0.0f, -1.0f, -1.0f },
			{ 1.0f, 1.0f, 0.0f },
			{ 0.0f, -1.0f, 1.0f },
			{ -1.0f, 1.0f, 0.0f },
			{ 0.0f, -1.0f, -1.0f },
		};
	};

	INLINE_NAMESPACE_MATH_END
}

//----	------	------	------	------	----//
//	Implementation							//
//----	------	------	------	------	----//

namespace Lumina {
	INLINE_NAMESPACE_MATH_BEGIN

	float PerlinNoise::operator()(float x_, float y_, float z_) const noexcept {
		float output{ 0.0f };

		float frequency{ BaseFrequency_ };
		float amplitude{ 1.0f };

		for (uint32_t i_Octave{ 0U }; i_Octave < Num_Octaves_; ++i_Octave) {
			output += Calculate(x_, y_, z_, frequency, Offset_) * amplitude;
			amplitude *= Persistance_;
			frequency *= 2.0f;
		}

		return output * Inv_MaxPossibleValue_;
	}

	//----	------	------	------	------	----//

	PerlinNoise::PerlinNoise(
		float baseFreq_,
		uint32_t num_Octaves_,
		float persistance_,
		Float3 const& offset_
	) noexcept {
		BaseFrequency_ = std::max<float>(std::abs(baseFreq_), 0.0009765625f);
		Num_Octaves_ = std::clamp<uint32_t>(num_Octaves_, 1U, 8U);
		Persistance_ = std::max<float>(persistance_, 0.0f);
		Offset_ = offset_;

		float maxPossibleValue{ 0.0f };
		float amplitude{ 1.0f };
		for (uint32_t i_Octave{ 0U }; i_Octave < Num_Octaves_; ++i_Octave) {
			maxPossibleValue += amplitude;
			amplitude *= Persistance_;
		}
		Inv_MaxPossibleValue_ = 1.0f / maxPossibleValue;
	}

	//****	******	******	******	******	****//

	float PerlinNoise::Calculate(
		float x_, float y_, float z_,
		float freq_,
		Float3 const& offset_
	) noexcept {
		x_ = x_ * freq_ + offset_.x;
		y_ = y_ * freq_ + offset_.y;
		z_ = z_ * freq_ + offset_.z;

		// Integer parts
		Int3 intParts{
			static_cast<int32_t>(x_) & 0xFF,
			static_cast<int32_t>(y_) & 0xFF,
			static_cast<int32_t>(z_) & 0xFF,
		};
		// Hash values of which inputs are the vertices of the unit cube
		// where the point (x_, y_, z_) lies
		int32_t hashVals[8]{
			Hash(intParts.x, intParts.y, intParts.z),
			Hash(intParts.x + 1, intParts.y, intParts.z),
			Hash(intParts.x, intParts.y + 1, intParts.z),
			Hash(intParts.x + 1, intParts.y + 1, intParts.z),
			Hash(intParts.x, intParts.y, intParts.z + 1),
			Hash(intParts.x + 1, intParts.y, intParts.z + 1),
			Hash(intParts.x, intParts.y + 1, intParts.z + 1),
			Hash(intParts.x + 1, intParts.y + 1, intParts.z + 1),
		};

		// Remainder parts
		Float3 remParts{
			x_ - std::floor(x_),
			y_ - std::floor(y_),
			z_ - std::floor(z_),
		};
		Float3 lerpFactors{
			Fade(remParts.x),
			Fade(remParts.y),
			Fade(remParts.z),
		};

		// Linear interpolation between the surflets of (x, y, z) and of (x + 1, y, z)
		float lerp_000_100{
			std::lerp(
				Surflet(hashVals[0], remParts.x, remParts.y, remParts.z),
				Surflet(hashVals[1], remParts.x - 1.0f, remParts.y, remParts.z),
				lerpFactors.x
			)
		};
		// Linear interpolation between the surflets of (x, y + 1, z) and of (x + 1, y + 1, z)
		float lerp_010_110{
			std::lerp(
				Surflet(hashVals[2], remParts.x, remParts.y - 1.0f, remParts.z),
				Surflet(hashVals[3], remParts.x - 1.0f, remParts.y - 1.0f, remParts.z),
				lerpFactors.x
			)
		};
		// Linear interpolation between the surflets of (x, y, z + 1) and of (x + 1, y, z + 1)
		float lerp_001_101{
			std::lerp(
				Surflet(hashVals[4], remParts.x, remParts.y, remParts.z - 1.0f),
				Surflet(hashVals[5], remParts.x - 1.0f, remParts.y, remParts.z - 1.0f),
				lerpFactors.x
			)
		};
		// Linear interpolation between the surflets of (x, y + 1, z + 1) and of (x + 1, y + 1, z + 1)
		float lerp_011_111{
			std::lerp(
				Surflet(hashVals[6], remParts.x, remParts.y - 1.0f, remParts.z - 1.0f),
				Surflet(hashVals[7], remParts.x - 1.0f, remParts.y - 1.0f, remParts.z - 1.0f),
				lerpFactors.x
			)
		};
		// Linear interpolation between the surflets of (x, y, z) and of (x + 1, y + 1, z)
		float lerp_000_110{ std::lerp(lerp_000_100, lerp_010_110, lerpFactors.y) };
		// Linear interpolation between the surflets of (x, y, z + 1) and of (x + 1, y + 1, z + 1)
		float lerp_001_111{ std::lerp(lerp_001_101, lerp_011_111, lerpFactors.y) };
		// Linear interpolation between the surflets of (x, y, z) and of (x + 1, y + 1, z + 1)
		float lerp_000_111{ std::lerp(lerp_000_110, lerp_001_111, lerpFactors.z) };

		return (lerp_000_111 + 1.0f) * 0.5f;
	}

	//----	------	------	------	------	----//

	constexpr int32_t PerlinNoise::Hash(int32_t x_, int32_t y_, int32_t z_) noexcept {
		return Permutation_[Permutation_[Permutation_[x_] + y_] + z_];
	}

	constexpr float PerlinNoise::Surflet(int32_t hashVal_, float x_, float y_, float z_) noexcept {
		Float3 const& grad{ Gradients_[hashVal_ & 0xF] };
		return grad.x * x_ + grad.y * y_ + grad.z * z_;
	}

	// Fade function as defined by Ken Perlin
	// 6t^5 - 15t^4 + 10t^3
	constexpr float PerlinNoise::Fade(float t_) noexcept {
		return t_ * t_ * t_ * (t_ * (t_ * 6.0f - 15.0f) + 10.0f);
	}

	INLINE_NAMESPACE_MATH_END
}